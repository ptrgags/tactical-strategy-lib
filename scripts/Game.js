// Generated by CoffeeScript 1.10.0

/*
Class to control the game.
The point of this class is to serve
as a thin wrapper around the map and stage
to create a simple API for use in event handlers
 */

(function() {
  var slice = [].slice;

  this.Game = (function() {
    function Game(rows, cols, grid_x, grid_y) {
      this.selected_unit = null;
      this.destination = null;
      this.current_team = 0;
      this.teams = [];
      this.num_teams = 2;
      this.stage = new createjs.Stage("stage");
      this.fsm = fsm;
      this.map = new Map(rows, cols, this.stage);
      this.map.set_offset(grid_x, grid_y);
      this.attach_mouse();
    }

    Game.prototype.add_units = function() {
      var ref, team, units;
      team = arguments[0], units = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      (ref = this.map).add_units.apply(ref, units);
      this.teams[team] = units;
      return this.update();
    };

    Game.prototype.add_structures = function() {
      var ref, structures;
      structures = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      (ref = this.map).add_structures.apply(ref, structures);
      return this.update();
    };

    Game.prototype.add_terrain = function() {
      var ref, terrain;
      terrain = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      (ref = this.map).add_terrain.apply(ref, terrain);
      return this.update();
    };

    Game.prototype.create_movement_grid = function() {
      this.map.create_movement_grid(this.selected_unit);
      return this.update();
    };

    Game.prototype.clear_movement_grid = function() {
      this.map.clear_selection_squares();
      return this.update();
    };

    Game.prototype.select_unit = function(unit) {
      this.selected_unit = unit;
      return update_selected_unit(unit);
    };

    Game.prototype.deselect_unit = function() {
      this.selected_unit = null;
      return update_selected_unit(null);
    };

    Game.prototype.set_destination = function(coords) {
      return this.destination = coords;
    };

    Game.prototype.move_unit = function() {
      var ref;
      (ref = this.map).move_unit.apply(ref, [this.selected_unit].concat(slice.call(this.destination)));
      this.selected_unit.disable();
      this.deselect_unit();
      this.destination = null;
      return this.update();
    };

    Game.prototype.end_move = function() {
      this.selected_unit.disable();
      this.deselect_unit();
      return this.update();
    };

    Game.prototype.team_active = function() {
      var active, i, len, ref, unit;
      active = false;
      ref = this.teams[this.current_team];
      for (i = 0, len = ref.length; i < len; i++) {
        unit = ref[i];
        if (unit.enabled) {
          active = true;
          break;
        }
      }
      return active;
    };

    Game.prototype.cycle_team = function() {
      var i, len, ref, unit;
      ref = this.teams[this.current_team];
      for (i = 0, len = ref.length; i < len; i++) {
        unit = ref[i];
        unit.enable();
      }
      this.update();
      this.current_team++;
      this.current_team %= this.num_teams;
      return update_team_number(this.current_team);
    };

    Game.prototype.update = function() {
      return this.stage.update();
    };

    Game.prototype.attach_mouse = function() {
      this.stage.on('stagemousemove', (function(_this) {
        return function(event) {
          return _this.map.on_hover(event.stageX, event.stageY);
        };
      })(this));
      return this.stage.on('stagemouseup', (function(_this) {
        return function(event) {
          return _this.map.on_click(event.stageX, event.stageY);
        };
      })(this));
    };

    Game.prototype.run = function() {
      this.fsm.run();
      return this.update();
    };

    return Game;

  })();

}).call(this);
