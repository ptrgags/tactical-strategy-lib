// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  this.Grid = (function() {
    function Grid(rows, cols, _default) {
      var col, row;
      this.rows = rows;
      this.cols = cols;
      this["default"] = _default != null ? _default : null;
      this.grid = (function() {
        var i, ref, results;
        results = [];
        for (row = i = 0, ref = this.rows; 0 <= ref ? i < ref : i > ref; row = 0 <= ref ? ++i : --i) {
          results.push((function() {
            var j, ref1, results1;
            results1 = [];
            for (col = j = 0, ref1 = this.cols; 0 <= ref1 ? j < ref1 : j > ref1; col = 0 <= ref1 ? ++j : --j) {
              results1.push(this["default"]);
            }
            return results1;
          }).call(this));
        }
        return results;
      }).call(this);
    }

    Grid.prototype.put = function(row, col, obj) {
      var clobbered;
      clobbered = this.get(row, col);
      this.grid[row][col] = obj;
      return clobbered;
    };

    Grid.prototype.get = function(row, col) {
      return this.grid[row][col];
    };

    Grid.prototype.get_all = function() {
      var col, i, j, obj, objs, ref, ref1, row;
      objs = [];
      for (row = i = 0, ref = this.rows; 0 <= ref ? i < ref : i > ref; row = 0 <= ref ? ++i : --i) {
        for (col = j = 0, ref1 = this.cols; 0 <= ref1 ? j < ref1 : j > ref1; col = 0 <= ref1 ? ++j : --j) {
          obj = this.get(row, col);
          if (obj != null) {
            objs.push(obj);
          }
        }
      }
      return objs;
    };

    Grid.prototype.remove = function(row, col) {
      var removed;
      removed = this.get(row, col);
      this.put(row, col, this["default"]);
      return removed;
    };

    Grid.prototype.move = function(from_row, from_col, to_row, to_col) {
      var clobbered, obj;
      clobbered = this.remove(to_row, to_col);
      obj = this.remove(from_row, from_col);
      this.put(to_row, to_col, obj);
      return clobbered;
    };

    Grid.prototype.swap = function(row_a, col_a, row_b, col_b) {
      var obj_a, obj_b;
      obj_a = this.remove(row_a, col_a);
      obj_b = this.remove(row_b, col_b);
      this.put(row_b, col_b, obj_a);
      return this.put(row_a, col_a, obj_b);
    };

    Grid.prototype.is_valid = function(row, col) {
      return (0 <= row && row < this.rows) && (0 <= col && col < this.cols);
    };

    Grid.prototype.repr = function() {
      return "Grid(" + this.rows + ", " + this.cols + ")";
    };

    return Grid;

  })();

  this.EntityGrid = (function(superClass) {
    extend(EntityGrid, superClass);

    function EntityGrid(rows, cols, cell_size) {
      this.rows = rows;
      this.cols = cols;
      this.cell_size = cell_size != null ? cell_size : CELL_SIZE;
      this.cell_size = CELL_SIZE;
      EntityGrid.__super__.constructor.call(this, this.rows, this.cols);
      this.container = new createjs.Container;
    }

    EntityGrid.prototype.set_offset = function(x, y) {
      var entity, i, len, ref, results;
      this.container.x = x;
      this.container.y = y;
      ref = this.get_all();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        entity = ref[i];
        results.push(this.update_entity_shape_pos(entity));
      }
      return results;
    };

    EntityGrid.prototype.put = function(row, col, entity) {
      EntityGrid.__super__.put.call(this, row, col, entity);
      this.update_entity_shape_pos(entity);
      return this.add_entity_shape(entity);
    };

    EntityGrid.prototype.put_entity = function(entity) {
      return this.put(entity.row, entity.col, entity);
    };

    EntityGrid.prototype.move = function(from_row, from_col, to_row, to_col) {
      var entity, ref;
      entity = this.get(from_row, from_col);
      ref = [to_row, to_col], entity.row = ref[0], entity.col = ref[1];
      return EntityGrid.__super__.move.call(this, from_row, from_col, to_row, to_col);
    };

    EntityGrid.prototype.move_entity = function(entity, dest_row, dest_col) {
      return this.move(entity.row, entity.col, dest_row, dest_col);
    };

    EntityGrid.prototype.swap_entities = function(entity_a, entity_b) {
      return this.swap(entity_a.row, entity_a.col, entity_b.row, entity_b.col);
    };

    EntityGrid.prototype.remove = function(row, col) {
      var entity;
      entity = EntityGrid.__super__.remove.call(this, row, col);
      this.remove_entity_shape(entity);
      return entity;
    };

    EntityGrid.prototype.remove_entity = function(entity) {
      return this.remove(entity.row, entity.col);
    };

    EntityGrid.prototype.update_entity_shape_pos = function(entity) {
      var shape;
      if ((entity != null) && (entity.shape != null)) {
        shape = entity.shape;
        shape.x = entity.col * this.cell_size;
        return shape.y = entity.row * this.cell_size;
      }
    };

    EntityGrid.prototype.remove_entity_shape = function(entity) {
      if ((entity != null) && (entity.shape != null)) {
        return this.container.removeChild(entity.shape);
      }
    };

    EntityGrid.prototype.add_entity_shape = function(entity) {
      if ((entity != null) && (entity.shape != null)) {
        return this.container.addChild(entity.shape);
      }
    };

    return EntityGrid;

  })(this.Grid);

  this.Map = (function() {
    function Map(rows, cols, stage, cell_size) {
      var col, gfx, i, j, k, layer, len, ref, ref1, ref2, row;
      this.rows = rows;
      this.cols = cols;
      this.stage = stage;
      this.cell_size = cell_size != null ? cell_size : CELL_SIZE;
      this.selections = new EntityGrid(this.rows, this.cols, this.cell_size);
      this.units = new EntityGrid(this.rows, this.cols, this.cell_size);
      this.structures = new EntityGrid(this.rows, this.cols, this.cell_size);
      this.terrain = new EntityGrid(this.rows, this.cols, this.cell_size);
      this.layers = [this.terrain, this.structures, this.units, this.selections];
      this.grid_lines = new createjs.Shape;
      gfx = this.grid_lines.graphics;
      gfx.setStrokeStyle(1);
      for (row = i = 0, ref = this.rows; 0 <= ref ? i < ref : i > ref; row = 0 <= ref ? ++i : --i) {
        for (col = j = 0, ref1 = this.cols; 0 <= ref1 ? j < ref1 : j > ref1; col = 0 <= ref1 ? ++j : --j) {
          gfx.beginStroke("grey");
          gfx.drawRect(col * this.cell_size, row * this.cell_size, this.cell_size, this.cell_size);
        }
      }
      gfx.setStrokeStyle(2);
      gfx.beginStroke("black");
      gfx.drawRect(0, 0, this.cols * this.cell_size, this.rows * this.cell_size);
      this.click_area = new createjs.Shape;
      this.click_area.hitArea = new createjs.Shape;
      gfx = this.click_area.hitArea.graphics;
      gfx.beginFill("black");
      gfx.drawRect(0, 0, this.cols * this.cell_size, this.rows * this.cell_size);
      this.stage.addChild(this.grid_lines);
      ref2 = this.layers;
      for (k = 0, len = ref2.length; k < len; k++) {
        layer = ref2[k];
        this.stage.addChild(layer.container);
      }
    }

    Map.prototype.set_offset = function(x, y) {
      var i, layer, len, ref, results;
      this.click_area.x = x;
      this.click_area.y = y;
      this.grid_lines.x = x;
      this.grid_lines.y = y;
      ref = this.layers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        layer = ref[i];
        results.push(layer.set_offset(x, y));
      }
      return results;
    };

    Map.prototype.add_units = function() {
      var i, len, results, unit, units;
      units = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (i = 0, len = units.length; i < len; i++) {
        unit = units[i];
        results.push(this.units.put_entity(unit));
      }
      return results;
    };

    Map.prototype.add_structures = function() {
      var i, len, results, structure, structures;
      structures = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (i = 0, len = structures.length; i < len; i++) {
        structure = structures[i];
        results.push(this.structures.put_entity(structure));
      }
      return results;
    };

    Map.prototype.add_terrain = function() {
      var i, len, results, terra, terrain;
      terrain = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (i = 0, len = terrain.length; i < len; i++) {
        terra = terrain[i];
        results.push(this.terrain.put_entity(terra));
      }
      return results;
    };

    Map.prototype.is_valid = function(row, col) {
      return this.selections.is_valid(row, col);
    };

    Map.prototype.create_movement_grid = function(unit) {
      return this.__spawn_movement_grid(unit, unit.row, unit.col, unit.movement);
    };

    Map.prototype.on_hover = function(mouse_x, mouse_y) {
      var col, entity, i, layer, len, local, ref, row, structure, terra, unit;
      local = this.click_area.globalToLocal(mouse_x, mouse_y);
      if (this.click_area.hitArea.hitTest(local.x, local.y)) {
        row = Math.floor(local.y / this.cell_size);
        col = Math.floor(local.x / this.cell_size);
        ref = this.layers;
        for (i = 0, len = ref.length; i < len; i++) {
          layer = ref[i];
          entity = layer.get(row, col);
          if ((entity != null) && (entity.on_hover != null)) {
            entity.on_hover();
          }
        }
        unit = this.units.get(row, col);
        structure = this.structures.get(row, col);
        terra = this.terrain.get(row, col);
        return update_under_cursor(unit, structure, terra);
      }
    };

    Map.prototype.on_click = function(mouse_x, mouse_y) {
      var col, entity, i, layer, len, local, ref, results, row;
      local = this.click_area.globalToLocal(mouse_x, mouse_y);
      if (this.click_area.hitArea.hitTest(local.x, local.y)) {
        row = Math.floor(local.y / this.cell_size);
        col = Math.floor(local.x / this.cell_size);
        ref = this.layers;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          layer = ref[i];
          entity = layer.get(row, col);
          if ((entity != null) && (entity.on_click != null)) {
            results.push(entity.on_click());
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };

    Map.prototype.__spawn_movement_grid = function(unit, row, col, movement) {
      var move_square, other_unit, place_square, square, structure, terra;
      if (!this.is_valid(row, col)) {
        return;
      }
      if (!(unit.row === row && unit.col === col)) {
        terra = this.terrain.get(row, col);
        if (terra != null) {
          movement -= terra.movement_cost;
        } else {
          movement -= 1;
        }
      }
      if (movement < 0) {
        return;
      }
      structure = this.structures.get(row, col);
      if (structure != null) {
        return;
      }
      place_square = true;
      other_unit = this.units.get(row, col);
      if (other_unit != null) {
        if (other_unit.team !== unit.team) {
          return;
        }
        place_square = false;
      }
      move_square = this.selections.get(row, col);
      if (move_square != null) {
        place_square = false;
      }
      if (place_square) {
        square = new MoveSquare(row, col);
        this.selections.put_entity(square);
      }
      this.__spawn_movement_grid(unit, row + 1, col, movement);
      this.__spawn_movement_grid(unit, row - 1, col, movement);
      this.__spawn_movement_grid(unit, row, col + 1, movement);
      return this.__spawn_movement_grid(unit, row, col - 1, movement);
    };

    Map.prototype.clear_selection_squares = function() {
      var entity, i, len, ref, results;
      ref = this.selections.get_all();
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        entity = ref[i];
        results.push(this.selections.remove_entity(entity));
      }
      return results;
    };

    Map.prototype.move_unit = function(unit, dest_row, dest_col) {
      return this.units.move_entity(unit, dest_row, dest_col);
    };

    return Map;

  })();

}).call(this);
