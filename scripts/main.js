// Generated by CoffeeScript 1.10.0
(function() {
  var slice = [].slice;

  this.init = function() {
    var enemies, hills, i, j, k, l, len, len1, len2, len3, len4, len5, m, n, o, p, players, row, structure, structures, terra, unit;
    hills = [];
    for (i = k = 0, len = terrain_map.length; k < len; i = ++k) {
      row = terrain_map[i];
      for (j = l = 0, len1 = row.length; l < len1; j = ++l) {
        terra = row[j];
        if (terra === 1) {
          hills.push(new Hill(i, j));
        }
      }
    }
    structures = [];
    for (i = m = 0, len2 = structures_map.length; m < len2; i = ++m) {
      row = structures_map[i];
      for (j = n = 0, len3 = row.length; n < len3; j = ++n) {
        structure = row[j];
        if (structure === 1) {
          structures.push(new Rock(i, j));
        }
      }
    }
    players = [];
    enemies = [];
    for (i = o = 0, len4 = units_map.length; o < len4; i = ++o) {
      row = units_map[i];
      for (j = p = 0, len5 = row.length; p < len5; j = ++p) {
        unit = row[j];
        if (unit === 1) {
          players.push(new Player(i, j, 4));
        } else if (unit === 2) {
          enemies.push(new Player(i, j, 4, 1));
        }
      }
    }
    this.game = new Game(10, 15, 50, 50);
    game.add_units.apply(game, [0].concat(slice.call(players)));
    game.add_units.apply(game, [1].concat(slice.call(enemies)));
    game.add_structures.apply(game, structures);
    game.add_terrain.apply(game, hills);
    return game.run();
  };

  this.click_move = function() {
    return fsm.do_event('select action move');
  };

  this.click_cancel = function() {
    if (fsm.state === 'select action') {
      return fsm.do_event('deselect unit');
    } else if (fsm.state === 'select movement') {
      return fsm.do_event('deselect action move');
    }
  };

  this.click_end_move = function() {
    return fsm.do_event('select action end move');
  };

  this.click_end_turn = function() {
    return fsm.run('end turn');
  };

  this.element = function(id) {
    return document.getElementById(id);
  };

  this.update_team_number = function(team) {
    return element('team').innerHTML = team + 1;
  };

  this.update_status = function(status) {
    return element('status').innerHTML = status;
  };

  this.set_move_enabled = function(enabled) {
    return element('move').disabled = !enabled;
  };

  this.set_cancel_enabled = function(enabled) {
    return element('cancel').disabled = !enabled;
  };

  this.set_end_move_enabled = function(enabled) {
    return element('end-move').disabled = !enabled;
  };

  this.set_end_turn_enabled = function(enabled) {
    return element('end-turn').disabled = !enabled;
  };

  this.update_selected_unit = function(unit) {
    if (unit != null) {
      element('selected-type').innerHTML = unit.type;
      element('selected-movement').innerHTML = unit.movement;
      return element('selected-team').innerHTML = unit.team + 1;
    } else {
      element('selected-type').innerHTML = '---';
      element('selected-movement').innerHTML = '---';
      return element('selected-team').innerHTML = '---';
    }
  };

  this.update_under_cursor = function(unit, structure, terrain) {
    if (unit != null) {
      element('hover-unit-type').innerHTML = unit.type;
      element('hover-unit-team').innerHTML = unit.team + 1;
    } else {
      element('hover-unit-type').innerHTML = '---';
      element('hover-unit-team').innerHTML = '---';
    }
    if (structure != null) {
      element('hover-structure-type').innerHTML = structure.type;
    } else {
      element('hover-structure-type').innerHTML = '---';
    }
    if (terrain != null) {
      element('hover-terrain-type').innerHTML = terrain.type;
      return element('hover-terrain-cost').innerHTML = terrain.movement_cost;
    } else {
      element('hover-terrain-type').innerHTML = '---';
      return element('hover-terrain-cost').innerHTML = 1;
    }
  };

}).call(this);
